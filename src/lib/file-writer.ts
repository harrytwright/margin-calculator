import * as fs from 'fs/promises'
import * as path from 'path'

import pluralize from 'pluralize'
import YAML from 'yaml'

import type {
  IngredientImportData,
  RecipeImportData,
  SupplierImportData,
} from '../schema'

export type WriteObjectType = 'ingredient' | 'recipe' | 'supplier'

type WriteDataMap = {
  ingredient: IngredientImportData
  recipe: RecipeImportData
  supplier: SupplierImportData
}

export type WriteData<T extends WriteObjectType> = WriteDataMap[T]

export class FileWriter {
  async write<T extends WriteObjectType>(
    type: T,
    slug: string,
    data: WriteData<T>,
    workingDir: string,
    existingPath?: string
  ): Promise<string> {
    const filePath =
      existingPath || path.join(workingDir, pluralize(type), `${slug}.yaml`)

    await this.ensureDirectory(path.dirname(filePath))

    const header = this.generateHeader()
    const content = YAML.stringify({
      object: type,
      data,
    })

    await fs.writeFile(filePath, `${header}${content}`, 'utf-8')

    return filePath
  }

  private generateHeader(): string {
    return [
      '# WARNING: This file was auto-generated by the Margin Calculator UI.',
      '# ',
      '# Please make any changes through the UI, not by editing this file directly.',
      '# Direct edits may be overwritten or cause import errors.',
      '# ',
      '# If you need to make manual changes, ensure the YAML syntax is valid and',
      '# follows the schema defined in src/schema.ts.',
      '',
    ].join('\n')
  }

  async deleteFile(filePath: string): Promise<void> {
    await fs.unlink(filePath)
  }

  private async ensureDirectory(dirPath: string): Promise<void> {
    await fs.mkdir(dirPath, { recursive: true })
  }
}
